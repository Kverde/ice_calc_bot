

mathExpr = term {operator1 term}

term = factor {operator2 factor}

factor = [unaryOp] factor [unaryOp2] | base {powerOp factor}

base = number | '(' mathExpr ')' | const | function

operator1 = '+' | '-' | '+%' | '-%'
operator2 = '*' | '/' | '//' | 'div' | 'mod' | '*%'
unaryOp = '+' | '-'
unaryOp2 = '!'
powerOp = '^' | '**'

function = ident '(' mathExpr ')'
const = ident

ident = a..Z [a..Z]
number = digit {digit} [. {digit}]
digit = '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '0' 